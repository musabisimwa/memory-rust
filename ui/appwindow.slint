
import { GridBox } from "std-widgets.slint";


struct TileData {
    label:string,
    is_visible:bool,
    is_solved:bool,
    
}
component MemoryTile inherits Rectangle {
    
    callback clicked();
    in property <bool> open_curtain;
    in property <bool> solved;
    in property <string> value;
    
    width: 64px;
    height: 32px;
    background: solved? #3960D5:#a40c2d;
    animate background{ duration: 800ms;}
    Text {
        text: value;
        font-size: 24px;
        font-weight: 23;
    }
    //left curtain
    Rectangle {
        background: #193076;
        x:0px;
        width:  open_curtain? 0px : (parent.width/2);
        height: parent.height;
        animate width { duration:  250ms; easing: ease-in;}
    }
    //right curtain
    Rectangle {
        background: #193076;
        x:open_curtain? parent.width: (parent.width/2);
        width:  open_curtain? 0px: (parent.width/2);
        height: parent.height;
        animate width { duration:  250ms; easing: ease-in;}
        animate x { duration:  250ms; easing: ease-in;}
    }
    TouchArea {
        clicked => {root.clicked()} //call back
    }
}
export component MainWindow inherits Window {
    width: 440px;
    height: 370px;
    callback is_pair_solved();
    in property <bool> disable_tiles;

    in-out property <[TileData]> memory_tiles:[
        {label:"A"},
        {label:"B"},
        {label:"C"},
        {label:"D"},
        {label:"E"},
        {label:"F"},
        {label:"G"},
        {label:"H"},
        {label:"I"},
        {label:"J"},
        {label:"K"},
        {label:"L"},
        {label:"M"},
        {label:"N"},
        {label:"O"},
    ];
    

    for tile[i] in memory_tiles:MemoryTile{
        x: mod (i,6)*74px;
        y: floor (i/6)*74px;
        width: 64px;
        height: 64px;
        value:tile.label ;
        open_curtain: tile.is-visible||tile.is-solved;
        solved: tile.is-solved;
        clicked => { //self.open_curtain = !self.open_curtain ;
            if(!root.disable_tiles){
                tile.is-visible=true;
                root.is_pair_solved();
            }    
        }

    }
    
    
}